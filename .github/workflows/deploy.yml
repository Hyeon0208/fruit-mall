name: deploy to ec2

on:
  push:
    branches: [ "master" ]

jobs:
  deploy: 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    # Gradle build
    - name: Build with Gradle
      run: ./gradlew bootJar


    # Spring 어플리케이션 Docker Image 빌드
    - name: Build Docker Image For Spring
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fruit-mall .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/fruit-mall

    # Configure AWS Credentials (6) - AWS 접근 권한 취득(IAM)
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    # 서버에서 Docker 이미지 실행
    - name: EC2 Docker Run
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: hyeon
        key: ${{ secrets.EC2_KEY }}
        script: |
          docker rm -f $(docker ps -qa)
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/fruit-mall
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fruit-mall
          sudo docker run -it -d -p 8080:8080 --name fruit-mall ${{ secrets.DOCKERHUB_USERNAME }}/fruit-mall
